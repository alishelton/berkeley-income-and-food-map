{"version":3,"sources":["Components/Map.js","Components/Analytics.js","App.js","serviceWorker.js","index.js"],"names":["stores","require","income","ColorMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clicked","d","geoPath","path","state","activeTract","node","reset","tractCallback","properties","NAME","incomeData","get","d3","selectAll","attr","setState","activeColorScheme","activePlotScheme","sNode","split","join","tracts","fastFoodPressed","incomePressed","conveniencePressed","createMap","bind","assertThisInitialized","updateMap","createPlot","updatePlot","colorMap","fast_food","convenience","titles","Map","map","geo_name","slice","nextProps","nextState","prevProps","prevState","_this2","legendNode","lNode","svgNode","component","albersProjection","scale","parallels","rotate","center","translate","projection","tip","d3Tip","offset","html","count","format","colorScheme","color","domain","range","x","rangeRound","enterGroups","data","invertExtent","enter","append","text","on","berkeley","topojson","objects","features","show","hide","_this3","f","formatStr","t","duration","ease","legendGroups","remove","exit","transition","_this4","g","xAxisG","style","yAxisG","incomeScale","plotScale","xScale","yScale","xAxis","tickFormat","yAxis","toConsumableArray","keys","plotNode","select","yLabel","_this5","plotDesc","react_default","a","createElement","className","ref","width","height","ButtonGroup","justified","Button","bsStyle","bsSize","onClick","Component","tractData","App","lastTractCallback","tract","clickedTract","tractIncome","Components_Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ade482f5.chunk.js","sourcesContent":["import style from 'bootstrap/dist/css/bootstrap.css';\nimport React, { Component } from 'react';\nimport '../App.css';\nimport * as d3 from 'd3';\nimport d3Tip from 'd3-tip';\nimport * as topojson from 'topojson';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nlet stores = require('../berkeley-map/store_data_by_tract');\nlet income = require(\"../berkeley-map/berkeley_income\");\n\nclass ColorMap extends Component {\n  constructor(props) {\n    super(props);\n    this.createMap = this.createMap.bind(this);\n    this.updateMap = this.updateMap.bind(this);\n    this.createPlot = this.createPlot.bind(this);\n    this.updatePlot = this.updatePlot.bind(this);\n    this.state = {\n      activeTract: d3.select(null),\n      activeColorScheme: \"income\",\n      activePlotScheme: \"fast_food\"\n    };\n    this.colorMap =  {\n      \"fast_food\": [[0, 8], d3.schemeGreens[8]],\n      \"income\": [[0, 260000], d3.schemeBlues[9]],\n      \"convenience\": [[0, 10], d3.schemeReds[9]]\n    };\n    this.titles = {\n      \"fast_food\": \"Count of Fast Food Chains by Census Tract\",\n      \"income\": \"Median Income By Census Tract\",\n      \"convenience\": \"Count of Convenience Stores by Census Tract\"\n    }\n    this.incomeData = new Map(income.map(d => [d.geo_name.slice(13), d.income]));\n  }\n\n  componentDidMount() {\n    this.createMap();\n    this.createPlot();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (this.state.activeColorScheme !== nextState.activeColorScheme)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.updateMap();\n    if (prevState.activePlotScheme !== this.state.activePlotScheme) {\n      this.updatePlot();\n    }\n  }\n\n  clicked = (d, geoPath, path) => {\n    if (this.state.activeTract.node() === path) {\n      return this.reset();\n    }\n    //inform analytics section\n    this.props.tractCallback(d.properties.NAME, this.incomeData.get(d.properties.NAME));\n\n    //update the state and map styling\n    d3.select(this.node).selectAll(\"path\").attr(\"stroke-width\", 1.5);\n    d3.select(path).attr(\"stroke-width\", 5);\n    this.setState({\n      activeTract: d3.select(path),\n      activeColorScheme: this.state.activeColorScheme,\n      activePlotScheme: this.state.activePlotScheme\n    });\n\n    //update selected plot point\n    d3.select(this.sNode).selectAll(\"circle\")\n      .attr(\"r\", 3)\n      .attr(\"fill\", \"white\")\n      .attr(\"fill-opacity\", 0.9);\n    d3.select(this.sNode).selectAll(\"#p\" + (d.properties.NAME).split(\".\").join(\"\"))\n      .attr(\"r\", 7)\n      .attr(\"fill\", \"#D85858\")\n      .attr(\"fill-opacity\", 1);\n  }\n\n  reset = () => {\n    //inform the analytic section\n    this.props.tractCallback(null, null);\n\n    //redraw the map and update state\n    this.tracts.selectAll(\"path\")\n      .attr(\"stroke-width\", 1.5);\n    d3.select(this.sNode).selectAll(\"circle\")\n      .attr(\"r\", 5)\n      .attr(\"fill\", \"white\")\n      .attr(\"fill-opacity\", 0.8);\n    this.setState({\n      activeTract: d3.select(null),\n      activeColorScheme: this.state.activeColorScheme,\n      activePlotScheme: this.state.activePlotScheme\n    });\n  }\n\n  createMap() {\n\n    const legendNode = d3.select(this.lNode);\n    const svgNode = d3.select(this.node);\n    const component = this;\n\n    //projection and path\n    var albersProjection = d3.geoAlbers()\n      .scale(190000*1.7)\n      .parallels([0, 10])\n      .rotate([0, 0])\n      .center([-122.2787, 37.8644])\n      .translate([svgNode.attr('width') / 2, svgNode.attr('height') / 2]);\n    var geoPath = d3.geoPath()\n      .projection(albersProjection);\n\n    //setup vars for choropleth\n    var tip = d3Tip()\n      .attr('class', 'd3-tip')\n      .offset([-5, 0])\n      .html(function(d) {\n        var tractIncome = component.incomeData.get(d.properties.NAME);\n        var fastFoodCount = stores[d.properties.NAME].fast_food.count;\n        var convenienceCount = stores[d.properties.NAME].convenience.count;\n        return \"Median Income: \" + tractIncome\n          + \"<br /> Fast Food Count: \" + fastFoodCount\n          + \"<br /> Convenience Store Count: \" + convenienceCount;\n    });\n    var format = d3.format(\".3~s\");\n    let colorScheme = this.colorMap[this.state.activeColorScheme];\n    var color = d3.scaleQuantize()\n      .domain(colorScheme[0])\n      .range(colorScheme[1]);\n    const x = d3.scaleLinear()\n          .domain(d3.extent(color.domain()))\n          .rangeRound([500, 200]);\n\n    //legend\n    var legendGroups = legendNode\n      .selectAll(\"g\")\n      .data(color.range().map(d => color.invertExtent(d)));\n    var enterGroups = legendGroups.enter()\n      .append(\"g\")\n      .attr(\"class\",\"legendGroup\");\n    enterGroups.append(\"rect\")\n      .attr(\"y\", d => x(d[0]) - 100)\n      .attr(\"height\", d => x(d[0]) - x(d[1]) + 10)\n      .attr(\"width\", 20)\n      .attr(\"fill\", d => color(d[0]));\n    enterGroups.append(\"text\")\n      .attr(\"x\", 30)\n      .attr(\"y\", d => (x(d[0]) - 85))\n      .attr(\"fill\", \"white\")\n      .text(d => format(d[1]));\n\n    //background rect\n    svgNode.append(\"rect\")\n    .attr(\"class\", \"background\")\n    .attr(\"width\", svgNode.attr('width'))\n    .attr(\"height\", svgNode.attr('height'))\n    .on(\"click\", function() {\n      component.reset();\n    });\n\n    let berkeley = require('../berkeley-map/tracts-topo');\n\n    //tract grouping\n    this.tracts = svgNode.append('g');\n    this.tracts.call(tip);\n\n    //drawing the map\n    this.tracts.selectAll(\"path\")\n      .data(topojson.feature(berkeley, berkeley.objects.tracts).features)\n      .enter()\n      .append(\"path\")\n      .attr(\"fill\", d => color(component.incomeData.get(d.properties.NAME)))\n      .attr(\"d\", geoPath)\n      .attr(\"stroke\", \"#373C47\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"stroke-linejoin\", \"bevel\")\n      .on('click', function(d) {\n        component.clicked(d, geoPath, this);\n      })\n      .on('mouseover', function(d) {\n        d3.select(this).attr('stroke-width', 5);\n        tip.show(d, this);\n      })\n      .on('mouseout', function() {\n        if (component.state.activeTract.node() !== this) {\n          d3.select(this).attr('stroke-width', 1.5);\n          tip.hide(this);\n        }\n      })\n      .append(\"title\")\n        .text(d => format(this.incomeData.get(d.properties.NAME)));\n  }\n\n  updateMap() {\n    let legendNode = d3.select(this.lNode);\n    let colorScheme = this.colorMap[this.state.activeColorScheme];\n\n    let color = d3.scaleQuantize()\n      .domain(colorScheme[0])\n      .range(colorScheme[1]);\n\n    let x = d3.scaleLinear()\n          .domain(d3.extent(color.domain()))\n          .rangeRound([500, 200]);\n\n    var f = null;\n    var formatStr = \".0f\";\n    if (this.state.activeColorScheme === \"income\") {\n      f = (d) => color(this.incomeData.get(d.properties.NAME));\n      formatStr = \".3~s\";\n    } else if (this.state.activeColorScheme === \"fast_food\") {\n      f = (d) => color(stores[d.properties.NAME].fast_food.count);\n    } else if (this.state.activeColorScheme === \"convenience\") {\n      f = (d) => color(stores[d.properties.NAME].convenience.count);\n    }\n    let format = d3.format(formatStr);\n    var t = d3.transition()\n      .duration(500)\n      .ease(d3.easeLinear);\n\n    //update legend\n    var legendGroups = legendNode\n      .selectAll(\".legendGroup\")\n      .data(color.range().map(d => color.invertExtent(d)));\n    var enterGroups = legendGroups.enter()\n      .append(\"g\")\n      .attr(\"class\", \"legendGroup\");\n    legendGroups.selectAll(\"rect\").remove();\n    legendGroups.selectAll(\"text\").remove();\n    legendGroups.append(\"rect\")\n      .attr(\"y\", d => x(d[0]) - 100)\n      .attr(\"height\", d => x(d[0]) - x(d[1]) + 10)\n      .attr(\"width\", 20)\n      .attr(\"fill\", d => color(d[0]));\n    legendGroups.append(\"text\")\n        .attr(\"x\", 30)\n        .attr(\"y\", d => (x(d[0]) - 100) + 15)\n        .attr(\"fill\", \"white\")\n        .text(d => format(d[1]));\n    legendGroups.exit().remove();\n\n    //update map colors\n    this.tracts.selectAll(\"path\")\n      .transition(t)\n      .attr(\"fill\", f);\n  }\n\n  createPlot() {\n    let g = d3.select(this.sNode).append('g');\n    let component = this;\n    let xAxisG = g.append('g')\n      .attr(\"class\", \"x axis\")\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"transform\", \"translate(20, 370)\");\n    xAxisG.append(\"text\")\n      .attr(\"class\", \"x label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", 350)\n      .attr(\"y\", 30)\n      .style(\"stroke-width\", 0.5)\n      .style(\"font-size\", \"1vw\")\n      .text(\"Tract Median Income\");\n    let yAxisG = g.append('g')\n      .attr(\"class\", \"y axis\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"transform\", \"translate(40, 10)\");\n    yAxisG.append(\"text\")\n      .attr(\"class\", \"y label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", -70)\n      .attr(\"y\", -30)\n      .style(\"stroke-width\", 0.5)\n      .style(\"font-size\", \"1vw\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(\"Fast Food Restaurant Count\");\n\n    var incomeScale = this.colorMap[\"income\"][0];\n    var plotScale = (this.colorMap[this.state.activePlotScheme][0]).slice();\n    plotScale[1]++;\n\n    let xScale = d3.scaleLinear()\n      .domain(incomeScale)\n      .range([20, 500]);\n    let yScale = d3.scaleLinear()\n      .domain(plotScale)\n      .range([360, 0]);\n\n    let xAxis = d3.axisBottom()\n      .scale(xScale)\n      .tickFormat(d3.format(\"~s\"));\n\n    let yAxis = d3.axisLeft()\n      .scale(yScale);\n\n    g.selectAll(\"circle\").data([...this.incomeData.keys()])\n          .enter().append(\"circle\")\n            .attr(\"id\", d => \"p\" + d.split(\".\").join(\"\"))\n            .attr(\"cx\", d => xScale(this.incomeData.get(d)))\n            .attr(\"cy\", d => yScale(stores[d][component.state.activePlotScheme].count))\n            .attr(\"fill\", \"white\")\n            .attr(\"fill-opacity\", 0.9)\n            .attr(\"r\", 5);\n\n    xAxisG.call(xAxis);\n    yAxisG.call(yAxis);\n  }\n\n  updatePlot() {\n    let plotNode = d3.select(this.sNode);\n    let component = this;\n\n    var plotScale = (this.colorMap[this.state.activePlotScheme][0]).slice();\n    plotScale[1]++;\n    let yScale = d3.scaleLinear()\n      .domain(plotScale)\n      .range([360, 0]);\n    let yAxis = d3.axisLeft()\n      .scale(yScale);\n\n    plotNode.selectAll(\"circle\")\n      .transition()\n      .duration(1000)\n      .attr(\"cy\", d => yScale(stores[d][component.state.activePlotScheme].count));\n\n    plotNode.select(\".y.axis\")\n      .transition()\n      .duration(1000)\n      .call(yAxis);\n\n    var yLabel = \"Fast Food Restaurant\";\n    if (this.state.activePlotScheme === \"convenience\") {\n      yLabel = \"Convenience Store\";\n    }\n    plotNode.select(\".y.label\")\n      .text(yLabel + \" Count\");\n  }\n\n  fastFoodPressed = () => {\n    this.setState({\n      activeTract: this.state.activeTract,\n      activeColorScheme: \"fast_food\",\n      activePlotScheme: \"fast_food\"\n    });\n  }\n\n  incomePressed = () => {\n    this.setState({\n      activeTract: this.state.activeTract,\n      activeColorScheme: \"income\",\n      activePlotScheme: this.state.activePlotScheme\n    });\n  }\n\n  conveniencePressed = () => {\n    this.setState({\n      activeTract: this.state.activeTract,\n      activeColorScheme: \"convenience\",\n      activePlotScheme: \"convenience\"\n    });\n  }\n\n  render() {\n    var plotDesc = \"Fast Food Restaurant\";\n    if (this.state.activeColorScheme === \"convenience\") {\n      plotDesc = \"Convenience Store\"\n    }\n    return (\n      <div className=\"map-div\">\n        <h3 className=\"map-title\">{this.titles[this.state.activeColorScheme]}</h3>\n        <svg ref={node => this.lNode = node} width={100} height={600} className=\"map-legend\"></svg>\n        <svg ref={node => this.node = node} width={this.props.width} height={this.props.height} className=\"map-svg\"></svg>\n        <h3 className=\"plot-title\">Median Income vs. {plotDesc} Count</h3>\n        <svg ref={node => this.sNode = node} width={this.props.width} height={this.props.height} className=\"plot-svg\"></svg>\n        <div className=\"color-button\">\n          <ButtonGroup justified>\n            <ButtonGroup>\n              <Button bsStyle=\"primary\" bsSize=\"large\" onClick={this.incomePressed}>Income</Button>\n            </ButtonGroup>\n            <ButtonGroup>\n              <Button bsStyle=\"primary\" bsSize=\"large\" onClick={this.fastFoodPressed}>Fast Food</Button>\n            </ButtonGroup>\n            <ButtonGroup>\n              <Button bsStyle=\"primary\" bsSize=\"large\" onClick={this.conveniencePressed}>Convenience Stores</Button>\n            </ButtonGroup>\n          </ButtonGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ColorMap;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport * as d3 from 'd3';\nlet tractData = require('../berkeley-map/store_data_by_tract.json');\n\nclass Analytics extends Component {\n  constructor(props) {\n    super(props);\n    this.createAnalyticsSection = this.createAnalyticsSection.bind(this);\n  }\n\n  rounder = (num) => {\n    return Math.ceil(num * 100) / 100;\n  }\n\n  createAnalyticsSection() {\n    if (this.props.tract === null) {\n      return (\n        <div>\n          <div className=\"analytics-info\">\n            <h2>Info</h2>\n            <p>Welcome to the Berkeley Neighborhood Food Mapping Project! Click\n            on any neighborhood to learn some stats on the food available there.</p>\n          </div>\n        </div>\n      )\n    } else {\n      let currentTractData = tractData[this.props.tract];\n      let format = d3.format(\",.5r\");\n      return (\n        <div>\n          <div className=\"analytics-data\">\n            <h2>Store Data</h2>\n            <h3>Median Income: ${format(this.props.income)}</h3>\n            <h3>Fast Food Chain Count: {currentTractData.fast_food.count}</h3>\n            <h3>Convenience Stores Count: {currentTractData.convenience.count}</h3>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    var currentTract = \"Berkeley\"\n    if (this.props.tract != null) {\n      currentTract= 'Census Tract: ' + this.props.tract;\n    }\n    return (\n      <div className=\"analytics-div\">\n        <h1 className=\"analytics-title\">{currentTract}</h1>\n        {this.createAnalyticsSection()}\n        {this.props.store != null &&\n          <h1 className=\"selected-store\">{this.props.store.properties.name}</h1>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Analytics;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ColorMap from './Components/Map'\nimport Analytics from './Components/Analytics'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clickedTract : null,\n      tractIncome: null\n    };\n  }\n\n  lastTractCallback = (tract, income) => {\n    this.setState({clickedTract : tract, tractIncome: income});\n  }\n\n  render() {\n    //put this after color map to include the analytics section\n    //<Analytics tract={this.state.clickedTract} income={this.state.tractIncome}/>\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Berkeley Income and Food Mapping</h1>\n        <ColorMap tractCallback={this.lastTractCallback} width={500} height={400} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}